import xml.etree.ElementTree as ET
from datetime import date
import telebot
from telebot import types
from decouple import config
import aiohttp
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='HandyCurrencyBot.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = config('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∞–ª—é—Ç
currency_names = {
    "USD": "–î–æ–ª–ª–∞—Ä –°–®–ê",
    "EUR": "–ï–≤—Ä–æ",
    "GBP": "–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤",
    "AUD": "–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä",
    "AZN": "–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç",
    "AMD": "–ê—Ä–º—è–Ω—Å–∫–∏–π –¥—Ä–∞–º",
    "BYN": "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å",
    "GEL": "–ì—Ä—É–∑–∏–Ω—Å–∫–∏–π –ª–∞—Ä–∏",
    "AED": "–î–∏—Ä—Ö–∞–º –û–ê–≠",
    "INR": "–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è",
    "KZT": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ",
    "CNY": "–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å",
    "TJS": "–¢–∞–¥–∂–∏–∫—Å–∫–∏–π —Å–æ–º–æ–Ω–∏",
    "TRY": "–¢—É—Ä–µ—Ü–∫–∞—è –ª–∏—Ä–∞",
    "UZS": "–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º",
    "UAH": "–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞",
    "JPY": "–Ø–ø–æ–Ω—Å–∫–∞—è –∏–µ–Ω–∞",
    "KRW": "–í–æ–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–æ—Ä–µ—è",
    "CHF": "–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫",
    "SEK": "–®–≤–µ–¥—Å–∫–∞—è –∫—Ä–æ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã
async def get_currency_rate(currency_code):
    current_date = date.today()
    current_date_str = current_date.strftime("%d/%m/%Y")
    url = f"https://www.cbr.ru/scripts/XML_daily.asp?date_req={current_date_str}"

    async with aiohttp.ClientSession() as session:
        async with session.get(url, ssl=False) as response:
            if response.status == 200:
                xml_content = await response.text()
                root = ET.fromstring(xml_content)

                for valute in root.findall('Valute'):
                    char_code = valute.find('CharCode').text
                    if char_code == currency_code:
                        name = valute.find('Name').text
                        vunit_rate = valute.find('VunitRate').text
                        vunit_rate = round(float(vunit_rate.replace(',', '.')), 2)
                        return f'<b>üá∑üá∫ {vunit_rate} —Ä—É–±–ª–µ–π –∑–∞ 1 {currency_names[currency_code]}</b>'
            else:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É"
def send_choose_currency_button(chat_id):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É", callback_data="choose_currency")
    markup.add(button)
    bot.send_message(chat_id, "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É':", reply_markup=markup, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã
def send_currency_selection_keyboard(chat_id):
    markup = types.InlineKeyboardMarkup()
    currencies = [
        ("USD", "üá∫üá∏"), ("EUR", "üá™üá∫"), ("GBP", "üá¨üáß"), ("AUD", "üá¶üá∫"), ("AZN", "üá¶üáø"),
        ("AMD", "üá¶üá≤"), ("BYN", "üáßüáæ"), ("GEL", "üá¨üá™"), ("AED", "üá¶üá™"), ("INR", "üáÆüá≥"),
        ("KZT", "üá∞üáø"), ("CNY", "üá®üá≥"), ("TJS", "üáπüáØ"), ("TRY", "üáπüá∑"), ("UZS", "üá∫üáø"),
        ("UAH", "üá∫üá¶"), ("JPY", "üáØüáµ"), ("KRW", "üá∞üá∑"), ("CHF", "üá®üá≠"), ("SEK", "üá∏üá™")
    ]

    row_width = 4
    for i in range(0, len(currencies), row_width):
        row = currencies[i:i+row_width]
        buttons = [types.InlineKeyboardButton(f"{flag} {currency}", callback_data=currency) for currency, flag in row]
        markup.row(*buttons)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log_activity(message, username)  # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_choose_currency_button(message.chat.id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É"
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    if call.data == "choose_currency":
        username = call.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_activity(call.message, username)  # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        send_currency_selection_keyboard(call.message.chat.id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –≤–∞–ª—é—Ç—ã
    else:
        currency_code = call.data
        username = call.from_user.username
        user_message = f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {currency_names[currency_code]} ({currency_code})"

        async def send_currency_rate():
            currency_rate = await get_currency_rate(currency_code)
            bot.send_message(call.message.chat.id, currency_rate, parse_mode='HTML')  # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º
            send_choose_currency_button(call.message.chat.id)  # –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É
            log_activity(call.message, username, user_message)  # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π

        asyncio.run(send_currency_rate())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def log_activity(message, username=None, user_message=None):
    username = username or message.from_user.username
    activity = f"User {username} sent message: '{user_message or message.text}'"

    logging.info(activity)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot.polling(none_stop=True)
